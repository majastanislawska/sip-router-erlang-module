#!KAMAILIO

debug=4
log_stderror=yes

memdbg=10
memlog=10
#mem_summary=15

log_facility=LOG_LOCAL0

fork=yes
children=1

listen=udp:127.0.0.1:5060
port=5060

mpath="./modules"


loadmodule "tm/tm.so"
loadmodule "sl/sl.so"
loadmodule "xlog/xlog.so"
loadmodule "ctl/ctl.so"
loadmodule "pv/pv.so"
loadmodule "erlang/erlang.so"
loadmodule "db_erlang/db_erlang.so"
#loadmodule "cfg_db/cfg_db.so"
loadmodule "avpops/avpops.so"
loadmodule "permissions/permissions.so"

modparam("ctl", "binrpc", "localhost:3000")
modparam("erlang","connect","name=con1;cookie=cookie;node=test@localhost")
#modparam("erlang","connect","name=con2;cookie=cookie;node=test2@localhost")
modparam("erlang","call_route_exit",1)
#modparam("cfg_db", "db_url", "erlang://con1/echo_server");
modparam("avpops", "db_url", "erlang://con1/db_mock_server");
modparam("avpops","avp_table","avptable");
modparam("avpops","use_domain",1)
modparam("permissions", "db_url", "erlang://con1/db_mock_server")

request_route {
    t_newtran();
    switch(@ruri.user) {
        case "info1":
            erlang_info("con1","echo_server","\"ok\"");
            xlog("erlang_info: $retcode\n");
            break;
        case "info2":
            erlang_info("con1","echo_server","{\"$mb\",\"$rb\"}");
            xlog("erlang_info: $retcode\n");
        case "info3":
            erlang_info("con1","echo_server","{$pp,\"$pr\"}");
            xlog("erlang_info: $retcode\n");
            break;
        case "info4":
            erlang_info("con1","echo_server","{\"$timef(%m/%d/%y)\",\"$Tf\",method,'$rm','r-uri',\"$ru\"}");
            xlog("erlang_info: $retcode\n");
            break;
        case "cast1":
            erlang_cast("con1","echo_server","\"ok\"");
            xlog("erlang_cast: $retcode\n");
            break;
        case "cast2":
            erlang_cast("con1","echo_server","{\"$mb\",\"$rb\"}");
            xlog("erlang_cast: $retcode\n");
        case "cast3":
            erlang_cast("con1","echo_server","{$pp,\"$pr\"}");
            xlog("erlang_cast: $retcode\n");
            break;
        case "cast4":
            erlang_cast("con1","echo_server","{\"$timef(%m/%d/%y)\",\"$Tf\",method,'$rm','r-uri',\"$ru\"}");
            xlog("erlang_cast: $retcode\n");
            break;
        case "rex1":
            erlang_rex("con1", "erlang", "time", "[]", "$var(result)");
            xlog("erlang_rex: $retcode $var(result)\n");
            break;
        case "rex2":
            # this is stupid example, this term does same as erlang_rex, but do not care about reply
            # in log You can notice error about unexpected msg
            erlang_cast("con1","rex","{call, erlang, time, [], user}");
            xlog("erlang_cast: $retcode\n");
            break;
        case "call1":
            erlang_call("con1","echo_server","[{method,'$rm'},{'r-uri',\"$ru\"}]", "$var(result)");
            xlog("erlang_call: $retcode $var(result)\n");
            break;
        case "route1":
            erlang_call_route("con1","echo_server","{'ERL_ROUTE',[{method,'$rm'},{'r-uri',\"$ru\"}]}", "$var(result)");
            xlog("erlang_call_route: $retcode $var(result)\n");
            $var(reply)="Route not executed " +$var(result);
            t_reply("500", "$var(reply)");
            exit;
            break;
        case "avp1":
            avp_db_load("$ru","$avp(s:test)");
            xlog("avp1: $retcode $var(result)\n");
            break;
        case "avp1a":
            avp_db_load("$ru","*");
            xlog("avp1: $retcode $var(result)\n");
            break;
        case "avp2":
            $avp(s:test)="test";
            avp_db_store("$ru","$avp(s:test)");
            xlog("avp1: $retcode $var(result)\n");
            break;
        case "avp3":
            avp_db_delete("$ru","$avp(s:4test)");
            xlog("avp1: $retcode $var(result)\n");
            break;
        case "avp4":
            avp_db_query("{'test1','test2'}","$avp(s:test1);$avp(s:test2)");
            xlog("avp1: $retcode $var(result)\n");
            break;
        default:
            t_reply("404", "try one of: cast[1..4]@ avp[1..4] rex[12]@ call1@ or route1@");
   }
   $var(reply)="reply from MAIN result=" +$var(result);
   t_reply("200", "$var(reply)");
}

route[ERL_ROUTE] {
    # $var(result) now contains reply received from erlang
    # note that other variables may be lost.
    xlog("ERL_ROUTE executed\n");
    $var(reply)="reply from ERL_RROUTE result=" +$var(result);
    t_reply("200", "$var(reply)");
    exit;
}



